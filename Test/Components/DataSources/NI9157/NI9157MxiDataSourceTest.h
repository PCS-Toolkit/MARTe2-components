/**
 * @file NI9157MxiDataSourceTest.h
 * @brief Header file for class NI9157MxiDataSourceTest
 * @date 23/05/2018
 * @author Giuseppe Ferr√≤
 *
 * @copyright Copyright 2015 F4E | European Joint Undertaking for ITER and
 * the Development of Fusion Energy ('Fusion for Energy').
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved
 * by the European Commission - subsequent versions of the EUPL (the "Licence")
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at: http://ec.europa.eu/idabc/eupl
 *
 * @warning Unless required by applicable law or agreed to in writing, 
 * software distributed under the Licence is distributed on an "AS IS"
 * basis, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the Licence permissions and limitations under the Licence.

 * @details This header file contains the declaration of the class NI9157MxiDataSourceTest
 * with all of its public, protected and private members. It may also include
 * definitions for inline methods which need to be visible to the compiler.
 */

#ifndef NI9157MXIDATASOURCETEST_H_
#define NI9157MXIDATASOURCETEST_H_

/*---------------------------------------------------------------------------*/
/*                        Standard header includes                           */
/*---------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
/*                        Project header includes                            */
/*---------------------------------------------------------------------------*/

#include "NI9157MxiDataSource.h"

/*---------------------------------------------------------------------------*/
/*                           Class declaration                               */
/*---------------------------------------------------------------------------*/

using namespace MARTe;

/**
 * @brief Tests the NI9157MxiDataSource methods
 * @details Compile into the folder TestLabviewFiles and be sure that in the configuration streams of the tests the variable NiDevice.NiRioGenFile points to this
 * folder. Export also the environment variable NI9157_PROJ_DIR to the folder when the dynamic library is created after the compilation.
 */
class NI9157MxiDataSourceTest {
public:

    /**
     * @brief Constructor
     */
    NI9157MxiDataSourceTest();

    /**
     * @brief Destructor
     */
    virtual ~NI9157MxiDataSourceTest();

    /**
     * @brief Tests the constructor
     */
    bool TestConstructor();

    /**
     * @brief Tests the Initialise method
     */
    bool TestInitialise();

    /**
     * @brief Tests the Initialise method with default RunNi parameter
     */
    bool TestInitialise_DefaultRunNi();

    /**
     * @brief Tests the Initialise method that returns false if NI9157DevicePath is not specified
     */
    bool TestInitialise_False_NoNiDev();

    /**
     * @brief Tests the Initialise method that returns false if the NI9157DevicePath is invalid
     */
    bool TestInitialise_False_InvalidNiDevPath();

    /**
     * @brief Tests the GetBrokerName method
     */
    bool TestGetBrokerName();

    /**
     * @brief Tests the SetConfiguredDatabase method
     */
    bool TestSetConfiguredDatabase();

    /**
     * @brief Tests the SetConfiguredDatabase method that fails if a signal name
     * is different than any Labview exported variable name.
     */
    bool TestSetConfiguredDatabase_False_InvalidLabviewVar();

    /**
     * @brief Tests the SetConfiguredDatabase method that fails if a signal type
     * is different than an integer type
     */
    bool TestSetConfiguredDatabase_False_InvalidType();

    /**
     * @brief Tests the PrepareNextState method
     */
    bool TestPrepareNextState();

    /**
     * @brief Tests the Synchronise method
     */
    bool TestSynchronise();

    /**
     * @brief Connect the oscilloscope to the output of the first phase of the DAC module. You should see the test sawtooth waveform
     * generated by the receiver hotlink module (generated at 2.5MHz but sampled at 100Hz and so aliased because the period is 3.2ms (~300Hz))
     */
    bool TestSynchronise_Oscilloscope();

    /**
     * @brief Connect the oscilloscope to the output of the first phase of the DAC module. You should see the test sawtooth waveform
     * generated by the receiver hotlink module. (generated at 2.5MHz but sampled at 200KHz)
     */
    bool TestSynchronise_Oscilloscope_OutputFIFO();


    /**
     * @brief Tests the read of the tick counter indicator coming from the NI-9157 device.
     */
    bool TestAsyncRead();

    /**
     * @brief Connect the oscilloscope to the output of the first phase of the DAC module. You should see a 1Hz sine waveform.
     */
    bool TestAsyncWrite();

    /**
     * @brief Same of TestSynchronise_Oscilloscope but with a MARTe cycle time of 1ms instead of 10ms. It is recommended to run this test in
     * real-time cpu because the interleaved operations are heavy
     */
    bool TestSynchronise_Oscilloscope_2MHz();

    /**
     * @brief Same of TestSynchronise_Oscilloscope_@MHz but with a MARTe cycle time of 1ms instead of 10ms. Not all the acquired data
     * is redirected on the DAC because the cycle time is not enough to make all the operations.
     * It is recommended to run this test in real-time cpu because the interleaved operations are heavy
     */
    bool TestSynchronise_Oscilloscope_OutputFIFO_2MHz();

};

/*---------------------------------------------------------------------------*/
/*                        Inline method definitions                          */
/*---------------------------------------------------------------------------*/

#endif /* NI9157MXIDATASOURCETEST_H_ */

